import java.awt.*;
import java.awt.event.*;
import javax.swing.*;


public class Menu extends JApplet implements ActionListener {

	private static final long serialVersionUID = 1L;
	private static JFrame menuFrame;
    private static JFrame visualisationFrame;

    private static Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

    private static JButton visualSHA3 = new JButton("Visualise SHA-3");
    private static JButton subRounds = new JButton("SHA-3 Sub-Rounds");
    private static JButton cumulativeDifference = new JButton("Run Cumulative Difference");
    private static JButton flipBitDifference = new JButton("Flip Bit Difference");
    private static JButton multiFlipBitDifference = new JButton("Multiple Flip Bit Difference");
    private static JButton settings = new JButton("Settings");

    private static SHA3Visualisation s;
    private static SubRounds sr;
    private static CumulativeDifference c;
    private static FlipBitDifference fb;
    private static MultipleFlippedBit mfb;


    public static int l = 4;
    public static int stateDepth = (int) Math.pow(2, l);
    public static String choosenSubRound;


    public Menu() {
        sizeOfState();
        setLayout(new BorderLayout());
        JPanel p = new JPanel(new GridLayout(6, 1));
        p.add(visualSHA3);
        p.add(subRounds);
        p.add(cumulativeDifference);
        p.add(flipBitDifference);
        p.add(multiFlipBitDifference);
        p.add(settings);
        add("Center", p);
        visualSHA3.addActionListener(this);
        subRounds.addActionListener(this);
        cumulativeDifference.addActionListener(this);
        flipBitDifference.addActionListener(this);
        multiFlipBitDifference.addActionListener(this);
        settings.addActionListener(this);
    };

    public void sizeOfState() {
        // JFrame frame = new JFrame();
        String str = JOptionPane.showInputDialog("Give a value between 1 and 6 (inclusive) to generate a state depth \n" +
            "(The depth is generated by raising 2 to this value) :");
        try {  
            int size = Integer.parseInt(str); 
             if(size > 0 && size < 7) {
                l = size;
                stateDepth = (int) Math.pow(2, l);
            } else {
                JOptionPane.showMessageDialog(null, "Invalid input, using " + l + " as the current value", "Alert", JOptionPane.ERROR_MESSAGE);
            } 
        }  
        catch(NumberFormatException nfe) {  
            JOptionPane.showMessageDialog(null, "Invalid input, using " + l + " as the current value", "Alert", JOptionPane.ERROR_MESSAGE);
        } 
    }

    public String selectSubRound() {
        JFrame frame = new JFrame();
        Object[] possibilities = {"Theta", "Rho", "Pi", "Chi", "Iota"};
        String s = (String)JOptionPane.showInputDialog(
            frame,
            "Select a SHA-3 Sub-Round from the List:",
            "SHA-3 Sub-Round",
            JOptionPane.PLAIN_MESSAGE,
            null,
            possibilities,
            "Theta");
        return s;
    }


    public void actionPerformed(ActionEvent e ) {
        if (e.getSource() == visualSHA3){
            s = new SHA3Visualisation();
            visualisationFrame = new JFrame();
            visualisationFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            visualisationFrame.add(s);
            visualisationFrame.setSize(new Dimension((int) (screenSize.getWidth()/2.0), (int) (screenSize.getHeight())));
            visualisationFrame.setLocationRelativeTo(null);
            visualisationFrame.setVisible(true);
        }
        else if (e.getSource() == subRounds){
            choosenSubRound = selectSubRound();
            if(choosenSubRound != null) {
                sr = new SubRounds();
                visualisationFrame = new JFrame();
                visualisationFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                visualisationFrame.add(sr);
                visualisationFrame.setSize(new Dimension((int) (screenSize.getWidth()/2.0), (int) (screenSize.getHeight())));
                visualisationFrame.setLocationRelativeTo(null);
                visualisationFrame.setVisible(true);
            }
        }
        else if (e.getSource() == cumulativeDifference) {
            if(c == null){
        	   c = new CumulativeDifference();
            }
            else{
                c.reset();
            }
        	visualisationFrame = new JFrame();
        	visualisationFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        	visualisationFrame.add(c);
        	visualisationFrame.setSize(new Dimension((int) (screenSize.getWidth()/2.0), (int) (screenSize.getHeight())));
        	visualisationFrame.setLocationRelativeTo(null);
        	visualisationFrame.setVisible(true);
        } else if (e.getSource() == flipBitDifference) {
            if(fb == null){
               fb = new FlipBitDifference();
            }
            else{
                fb.reset();
            }
            visualisationFrame = new JFrame();
            visualisationFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            visualisationFrame.add(fb);
            visualisationFrame.setSize(new Dimension((int) (screenSize.getWidth()/2.0), (int) (screenSize.getHeight())));
            visualisationFrame.setLocationRelativeTo(null);
            visualisationFrame.setVisible(true);
        } else if (e.getSource() == multiFlipBitDifference) {
            if(mfb == null){
               mfb = new MultipleFlippedBit();
            }
            else{
                mfb.reset();
            }
            visualisationFrame = new JFrame();
            visualisationFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            visualisationFrame.add(mfb);
            visualisationFrame.setSize(new Dimension((int) (screenSize.getWidth()/2.0), (int) (screenSize.getHeight())));
            visualisationFrame.setLocationRelativeTo(null);
            visualisationFrame.setVisible(true);
        }
        else if (e.getSource() == settings) {
            sizeOfState();
        }
    };

    public static void main(String[] args) {
        Menu m = new Menu();
        menuFrame = new JFrame();
        menuFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        menuFrame.add(m);
        menuFrame.setSize(new Dimension((int) (screenSize.getWidth()/5.0), (int) (screenSize.getHeight()/1.5)));
        menuFrame.setLocationRelativeTo(null);
        menuFrame.setVisible(true);
    };
}